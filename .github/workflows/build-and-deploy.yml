name: build-and-deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature/deploy

jobs:
  # Check which services have changed so we only deploy the changed services
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      trusted-users: ${{ steps.filter.outputs.trusted-users }}
      private-sessions: ${{ steps.filter.outputs.private-sessions }}
      admin: ${{ steps.filter.outputs.admin }}
      user-keys: ${{ steps.filter.outputs.user-keys }}
      media: ${{ steps.filter.outputs.media }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for full commit history
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            trusted-users:
              - 'services/trusted-users/**'
              - 'packages/**'
            private-sessions:
              - 'services/private-sessions/**'
              - 'packages/**'
            admin:
              - 'services/admin/**'
              - 'packages/**'
            user-keys:
              - 'services/user-keys/**'
              - 'packages/**'
            media:
              - 'services/media/**'
              - 'packages/**'

  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Set version
        id: set_version
        run: |
          echo "version=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          file: ./Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=min
          outputs: type=docker,dest=${{ github.workspace }}/speakeasy-services-${{ steps.set_version.outputs.version }}.tar
          build-args: |
            EXPO_PUBLIC_BUNDLE_IDENTIFIER=${{ github.sha }}
          tags: |
            speakeasy-services-image:latest
            speakeasy-services-image:${{ steps.set_version.outputs.version }}

      - name: Gzip Docker Image
        run: |
          gzip -c ${{ github.workspace }}/speakeasy-services-${{ steps.set_version.outputs.version }}.tar > ${{ github.workspace }}/speakeasy-services-${{ steps.set_version.outputs.version }}.tar.gz

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: speakeasy-services-tar-gz
          path: ${{ github.workspace }}/speakeasy-services-${{ steps.set_version.outputs.version }}.tar.gz
          retention-days: 1

  push-to-production:
    runs-on: ubuntu-latest
    needs: [check-changes, build]
    if: needs.check-changes.outputs.admin == 'true' || needs.check-changes.outputs.trusted-users == 'true' || needs.check-changes.outputs.private-sessions == 'true' || needs.check-changes.outputs.media == 'true'
    environment: production

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: speakeasy-services-tar-gz
          path: ${{ github.workspace }}

      - name: Copy Docker Image to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: ${{ github.workspace }}/speakeasy-services-*.tar.gz
          target: /home/speakeasy
          strip_components: 5

      - name: Load Docker Image and Cleanup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -e

            # Find most recent tar.gz file
            LATEST_TAR=$(ls -t /home/speakeasy/speakeasy-services-*.tar.gz | head -n1)

            if [ ! -f "${LATEST_TAR}" ]; then
              echo "Error: Docker image file not found"
              exit 1
            fi

            # Load the image
            gunzip -c "${LATEST_TAR}" > "${LATEST_TAR%.gz}"
            docker load < "${LATEST_TAR%.gz}"
            rm -f "${LATEST_TAR%.gz}"

            # Keep only the 3 most recent tar.gz files
            cd /home/speakeasy
            ls -t speakeasy-services-*.tar.gz | tail -n +4 | xargs -r rm

            # Cleanup old Docker images
            # Keep only the 3 most recent versions plus 'latest' tag
            docker images "speakeasy-services-image:*" --format "{{.Tag}}" | \
              grep -v "latest" | sort -r | tail -n +4 | \
              while read -r tag; do
                # Check if any containers are using this image
                if ! docker ps -a --filter ancestor=speakeasy-services-image:$tag -q | grep -q .; then
                  # Only remove if no containers are using it
                  docker rmi speakeasy-services-image:$tag
                else
                  echo "Skipping removal of speakeasy-services-image:$tag - image is in use"
                fi
              done

  push-to-keys-production:
    needs: [check-changes, build]
    if: needs.check-changes.outputs.user-keys == 'true'
    runs-on: ubuntu-latest
    environment: keys-production
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: speakeasy-services-tar-gz
          path: ${{ github.workspace }}

      - name: Copy Docker Image to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: ${{ github.workspace }}/speakeasy-services-*.tar.gz
          target: /home/speakeasy
          strip_components: 5

      - name: Load Docker Image and Cleanup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -e

            # Find most recent tar.gz file
            LATEST_TAR=$(ls -t /home/speakeasy/speakeasy-services-*.tar.gz | head -n1)

            if [ ! -f "${LATEST_TAR}" ]; then
              echo "Error: Docker image file not found"
              exit 1
            fi

            # Load the image
            gunzip -c "${LATEST_TAR}" > "${LATEST_TAR%.gz}"
            docker load < "${LATEST_TAR%.gz}"
            rm -f "${LATEST_TAR%.gz}"

            # Keep only the 3 most recent tar.gz files
            cd /home/speakeasy
            ls -t speakeasy-services-*.tar.gz | tail -n +4 | xargs -r rm

            # Cleanup old Docker images
            # Keep only the 3 most recent versions plus 'latest' tag
            docker images "speakeasy-services-image:*" --format "{{.Tag}}" | \
              grep -v "latest" | sort -r | tail -n +4 | \
              while read -r tag; do
                # Check if any containers are using this image
                if ! docker ps -a --filter ancestor=speakeasy-services-image:$tag -q | grep -q .; then
                  # Only remove if no containers are using it
                  docker rmi speakeasy-services-image:$tag
                else
                  echo "Skipping removal of speakeasy-services-image:$tag - image is in use"
                fi
              done

  deploy-private-sessions:
    runs-on: ubuntu-latest
    needs: [push-to-production]
    environment: production
    if: needs.check-changes.outputs.private-sessions == 'true'

    steps:
      - name: Run Database Migrations
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker run --rm \
              -e PRIVATE_SESSIONS_DATABASE_URL="postgres://svc_migration:${{ secrets.MIGRATION_PASSWORD }}@spkeasy-prod-cecmqzqsiasy.db.upclouddatabases.com:11569/speakeasy?schema=private_sessions&sslmode=require&sslcert=/run/secrets/database_cert" \
              speakeasy-services-image:latest \
              pnpm --filter @speakeasy-services/private-sessions prisma:migrate

      - name: Deploy Service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker compose -f /home/speakeasy/app/docker-compose.yaml up -d speakeasy-private-sessions

            # Wait for container to be running and healthy
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' speakeasy-private-sessions)
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "Container is healthy"
                exit 0
              fi
              if [ $i -eq 10 ]; then
                echo "Container failed to become healthy"
                docker logs speakeasy-private-sessions
                exit 1
              fi
              sleep 1
            done

      - name: Deploy Worker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            # Start new worker
            docker compose -f /home/speakeasy/app/docker-compose.yaml up -d speakeasy-private-sessions-worker

            # Wait for container to be running and healthy
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' speakeasy-private-sessions-worker)
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "Container is healthy"
                exit 0
              fi
              if [ $i -eq 10 ]; then
                echo "Container failed to become healthy"
                docker logs speakeasy-private-sessions-worker
                exit 1
              fi
              sleep 1
            done

  deploy-trusted-users:
    runs-on: ubuntu-latest
    needs: [push-to-production]
    environment: production
    if: needs.check-changes.outputs.trusted-users == 'true'

    steps:
      - name: Run Database Migrations
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker run --rm \
              -e TRUSTED_USERS_DATABASE_URL="postgres://svc_migration:${{ secrets.MIGRATION_PASSWORD }}@spkeasy-prod-cecmqzqsiasy.db.upclouddatabases.com:11569/speakeasy?schema=trusted_users&sslmode=require&sslcert=/run/secrets/database_cert" \
              speakeasy-services-image:latest \
              pnpm --filter @speakeasy-services/trusted-users prisma:migrate

      - name: Deploy Service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker compose -f /home/speakeasy/app/docker-compose.yaml up -d speakeasy-trusted-users

            # Wait for container to be running and healthy
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' speakeasy-trusted-users)
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "Container is healthy"
                exit 0
              fi
              if [ $i -eq 10 ]; then
                echo "Container failed to become healthy"
                docker logs speakeasy-trusted-users
                exit 1
              fi
              sleep 1
            done

  deploy-admin:
    runs-on: ubuntu-latest
    needs: [push-to-production]
    environment: production
    if: needs.check-changes.outputs.admin == 'true'

    steps:
      - name: Run Database Migrations
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker run --rm \
              -e SERVICE_ADMIN_DATABASE_URL="postgres://svc_migration:${{ secrets.MIGRATION_PASSWORD }}@spkeasy-prod-cecmqzqsiasy.db.upclouddatabases.com:11569/speakeasy?schema=service_admin&sslmode=require&sslcert=/run/secrets/database_cert" \
              speakeasy-services-image:latest \
              pnpm --filter @speakeasy-services/service-admin prisma:migrate

      - name: Deploy Service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker compose -f /home/speakeasy/app/docker-compose.yaml up -d speakeasy-service-admin

            # Wait for container to be running and healthy
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' speakeasy-service-admin)
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "Container is healthy"
                exit 0
              fi
              if [ $i -eq 10 ]; then
                echo "Container failed to become healthy"
                docker logs speakeasy-service-admin
                exit 1
              fi
              sleep 1
            done

  deploy-user-keys:
    runs-on: ubuntu-latest
    needs: [push-to-keys-production]
    environment: keys-production
    if: needs.check-changes.outputs.user-keys == 'true'

    steps:
      - name: Run Database Migrations
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker run --rm \
              --network db_speakeasy-internal \
              -e USER_KEYS_DATABASE_URL="${{ secrets.USER_KEYS_MIGRATION_DATABASE_URL }}" \
              speakeasy-services-image:latest \
              pnpm --filter @speakeasy-services/user-keys prisma:migrate

      - name: Deploy Service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker compose -f /home/speakeasy/app/docker-compose.yaml up -d speakeasy-user-keys

            # Wait for container to be running and healthy
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' speakeasy-user-keys)
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "Container is healthy"
                exit 0
              fi
              if [ $i -eq 10 ]; then
                echo "Container failed to become healthy"
                docker logs speakeasy-user-keys
                exit 1
              fi
              sleep 1
            done

      - name: Deploy Worker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            # Start new worker
            docker compose -f /home/speakeasy/app/docker-compose.yaml up -d speakeasy-user-keys-worker

            # Wait for container to be running and healthy
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' speakeasy-user-keys-worker)
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "Container is healthy"
                exit 0
              fi
              if [ $i -eq 10 ]; then
                echo "Container failed to become healthy"
                docker logs speakeasy-user-keys-worker
                exit 1
              fi
              sleep 1
            done

  deploy-media:
    runs-on: ubuntu-latest
    needs: [push-to-production]
    environment: production
    if: needs.check-changes.outputs.media == 'true'

    steps:
      - name: Run Database Migrations
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker run --rm \
              -e MEDIA_DATABASE_URL="postgres://svc_migration:${{ secrets.MIGRATION_PASSWORD }}@spkeasy-prod-cecmqzqsiasy.db.upclouddatabases.com:11569/speakeasy?schema=media&sslmode=require&sslcert=/run/secrets/database_cert" \
              speakeasy-services-image:latest \
              pnpm --filter @speakeasy-services/media prisma:migrate

      - name: Deploy Service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker compose -f /home/speakeasy/app/docker-compose.yaml up -d speakeasy-media

            # Wait for container to be running and healthy
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' speakeasy-media)
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "Container is healthy"
                exit 0
              fi
              if [ $i -eq 10 ]; then
                echo "Container failed to become healthy"
                docker logs speakeasy-media
                exit 1
              fi
              sleep 1
            done

  cleanup-services-docker-images:
    runs-on: ubuntu-latest
    needs:
      [
        deploy-private-sessions,
        deploy-trusted-users,
        deploy-admin,
        deploy-media,
      ]
    if: |
      always() && (
        (needs.deploy-private-sessions.result == 'success' && needs.check-changes.outputs.private-sessions == 'true') ||
        (needs.deploy-trusted-users.result == 'success' && needs.check-changes.outputs.trusted-users == 'true') ||
        (needs.deploy-admin.result == 'success' && needs.check-changes.outputs.admin == 'true') ||
        (needs.deploy-media.result == 'success' && needs.check-changes.outputs.media == 'true')
      )
    environment: production
    steps:
      - name: Cleanup Docker Images on Services Host
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker image prune -f --filter "until=24h" --filter "label!=current"

  cleanup-keys-docker-images:
    runs-on: ubuntu-latest
    needs: [deploy-user-keys]
    environment: keys-production

    steps:
      - name: Cleanup Docker Images on Keys Host
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker image prune -f --filter "until=24h" --filter "label!=current"
