name: build-and-push-bskyweb-upcloud

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature/deploy-upcloud

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Set outputs
        id: vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "version=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          file: ./Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=${{ github.workspace }}/speakeasy-services.tar
          build-args: |
            EXPO_PUBLIC_BUNDLE_IDENTIFIER=${{ steps.vars.outputs.sha_short }}
          tags: speakeasy-services-image:${{ steps.vars.outputs.version }}

      - name: Gzip Docker Image
        run: |
          gzip -c ${{ github.workspace }}/speakeasy-services.tar > ${{ github.workspace }}/speakeasy-services.tar.gz

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: speakeasy-services-tar-gz
          path: ${{ github.workspace }}/speakeasy-services.tar.gz

  push-to-production:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: speakeasy-services-tar-gz
          path: ${{ github.workspace }}

      - name: Copy Docker Image to UpCloud Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: ${{ github.workspace }}/speakeasy-services.tar.gz
          target: /home/speakeasy

  deploy-private-sessions:
    runs-on: ubuntu-latest
    needs: push-to-production
    environment: production
    if: github.ref == 'refs/heads/main' && (contains(github.event.head_commit.modified, 'packages/') || contains(github.event.head_commit.modified, 'services/private-sessions/'))

    steps:
      - name: Deploy Private Sessions Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            SERVICE="private-sessions"
            TAR_GZ="/home/speakeasy/speakeasy-services.tar.gz"
            TAR="/home/speakeasy/speakeasy-services-${SERVICE}.tar"

            gunzip -c ${TAR_GZ} > ${TAR}
            docker load < ${TAR}

            # Create or update Docker secrets
            echo "${{ secrets.POSTGRES_PASSWORD }}" | docker secret create postgres_password - 2>/dev/null || docker secret update postgres_password - <<< "${{ secrets.POSTGRES_PASSWORD }}"
            echo "${{ secrets.POSTGRES_USER }}" | docker secret create postgres_user - 2>/dev/null || docker secret update postgres_user - <<< "${{ secrets.POSTGRES_USER }}"
            echo "${{ secrets.POSTGRES_DB }}" | docker secret create postgres_db - 2>/dev/null || docker secret update postgres_db - <<< "${{ secrets.POSTGRES_DB }}"

            # Deploy with secrets
            docker-compose -f /home/speakeasy/docker-compose.prod.yml up -d private-sessions

            # Clean up
            rm -f ${TAR}

  deploy-trusted-users:
    runs-on: ubuntu-latest
    needs: push-to-production
    environment: production
    if: github.ref == 'refs/heads/main' && (contains(github.event.head_commit.modified, 'packages/') || contains(github.event.head_commit.modified, 'services/trusted-users/'))

    steps:
      - name: Deploy Trusted Users Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            SERVICE="trusted-users"
            TAR_GZ="/home/speakeasy/speakeasy-services.tar.gz"
            TAR="/home/speakeasy/speakeasy-services-${SERVICE}.tar"

            gunzip -c ${TAR_GZ} > ${TAR}
            docker load < ${TAR}

            # Create or update Docker secrets
            echo "${{ secrets.POSTGRES_PASSWORD }}" | docker secret create postgres_password - 2>/dev/null || docker secret update postgres_password - <<< "${{ secrets.POSTGRES_PASSWORD }}"
            echo "${{ secrets.POSTGRES_USER }}" | docker secret create postgres_user - 2>/dev/null || docker secret update postgres_user - <<< "${{ secrets.POSTGRES_USER }}"
            echo "${{ secrets.POSTGRES_DB }}" | docker secret create postgres_db - 2>/dev/null || docker secret update postgres_db - <<< "${{ secrets.POSTGRES_DB }}"

            # Deploy with secrets
            docker-compose -f /home/speakeasy/docker-compose.prod.yml up -d trusted-users

            # Clean up
            rm -f ${TAR}

  deploy-user-keys:
    runs-on: ubuntu-latest
    needs: push-to-production
    environment: production
    if: github.ref == 'refs/heads/main' && (contains(github.event.head_commit.modified, 'packages/') || contains(github.event.head_commit.modified, 'services/user-keys/'))

    steps:
      - name: Deploy User Keys Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            SERVICE="user-keys"
            TAR_GZ="/home/speakeasy/speakeasy-services.tar.gz"
            TAR="/home/speakeasy/speakeasy-services-${SERVICE}.tar"

            gunzip -c ${TAR_GZ} > ${TAR}
            docker load < ${TAR}

            # Create or update Docker secrets
            echo "${{ secrets.POSTGRES_PASSWORD }}" | docker secret create postgres_password - 2>/dev/null || docker secret update postgres_password - <<< "${{ secrets.POSTGRES_PASSWORD }}"
            echo "${{ secrets.POSTGRES_USER }}" | docker secret create postgres_user - 2>/dev/null || docker secret update postgres_user - <<< "${{ secrets.POSTGRES_USER }}"
            echo "${{ secrets.POSTGRES_DB }}" | docker secret create postgres_db - 2>/dev/null || docker secret update postgres_db - <<< "${{ secrets.POSTGRES_DB }}"

            # Deploy with secrets
            docker-compose -f /home/speakeasy/docker-compose.prod.yml up -d user-keys

            # Clean up
            rm -f ${TAR}
