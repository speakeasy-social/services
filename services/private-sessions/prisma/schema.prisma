// This is your Prisma schema file for the private-sessions service

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRIVATE_SESSIONS_DATABASE_URL")
}

model Session {
  id                String    @id @default(uuid()) @db.Uuid
  authorDid         String
  createdAt         DateTime  @default(now())
  expiresAt         DateTime?
  revokedAt         DateTime?
  previousSessionId String?   @unique @db.Uuid

  // Relationships
  previousSession   Session?  @relation("SessionHistory", fields: [previousSessionId], references: [id])
  nextSession      Session?  @relation("SessionHistory")
  sessionKeys       SessionKey[]
  staffKey         StaffKey?
  posts            EncryptedPost[]

  @@index([authorDid, createdAt(sort: Desc)], name: "idx_sessions_current")
  @@map("sessions")
}

model SessionKey {
  sessionId    String @db.Uuid
  recipientDid String
  encryptedDek Bytes

  // Relationships
  session     Session @relation(fields: [sessionId], references: [id])

  @@id([sessionId, recipientDid])
  @@index([recipientDid, sessionId], name: "idx_session_keys_by_recipient")
  @@index([sessionId, recipientDid], name: "idx_session_keys_with_session")
  @@map("session_keys")
}

model StaffKey {
  sessionId String @id @db.Uuid
  dek      Bytes

  // Relationships
  session   Session @relation(fields: [sessionId], references: [id])

  @@map("staff_keys")
}

model EncryptedPost {
  postId        String   @id @default(uuid()) @db.Uuid
  sessionId     String   @db.Uuid
  authorDid     String
  encryptedContent Bytes
  createdAt     DateTime @default(now())

  // Relationships
  session       Session  @relation(fields: [sessionId], references: [id])

  @@index([authorDid, createdAt(sort: Desc)], name: "idx_posts_by_author")
  @@index([sessionId, createdAt(sort: Desc)], name: "idx_posts_by_session")
  @@index([createdAt(sort: Desc), sessionId], name: "idx_posts_by_time")
  @@map("encrypted_posts")
}
