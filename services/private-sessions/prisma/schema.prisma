// This is your Prisma schema file for the private-sessions service

generator client {
  provider = "prisma-client-js"
  output = "../src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("PRIVATE_SESSIONS_DATABASE_URL")
}

model Session {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  authorDid         String
  createdAt         DateTime  @default(now()) 
  expiresAt         DateTime
  revokedAt         DateTime?

  // Relationships
  sessionKeys       SessionKey[] @relation("SessionToSessionKeys")
  posts             EncryptedPost[] @relation("SessionToPosts")

  @@index([authorDid, createdAt(sort: Desc)], name: "idx_sessions_current")
  @@map("sessions")
}

model SessionKey {
  sessionId    String @db.Uuid
  userKeyPairId String @db.Uuid
  recipientDid String
  encryptedDek Bytes
  createdAt    DateTime  @default(now()) 

  // Relationships
  session     Session @relation("SessionToSessionKeys", fields: [sessionId], references: [id])

  @@id([sessionId, recipientDid])
  @@index([recipientDid, sessionId, createdAt], name: "idx_session_keys_by_recipient_session_created_at")
  @@index([sessionId, createdAt], name: "idx_session_keys_with_session_created_at")
  @@index([userKeyPairId], name: "idx_session_keys_with_user_key_pair_id")
  @@map("session_keys")
}

model EncryptedPost {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  uri           String   @unique
  rkey          String
  sessionId     String   @db.Uuid
  authorDid     String
  langs         String[]
  replyRootUri  String?
  replyUri      String?
  encryptedContent Bytes
  createdAt     DateTime @default(now())

  // Relationships
  session       Session  @relation("SessionToPosts", fields: [sessionId], references: [id])
  mediaPosts    MediaPost[]
  reactions     Reaction[]
  notifications Notification[]

  @@index([authorDid, createdAt(sort: Desc)], name: "idx_posts_by_author_created")
  @@index([sessionId, createdAt(sort: Desc), authorDid], name: "idx_posts_by_session_created_author")
  @@index([uri], name: "idx_posts_by_uri")
  @@index([replyRootUri, sessionId], name: "idx_posts_by_reply_root")
  @@index([replyUri, sessionId], name: "idx_posts_by_reply_parent")
  @@map("encrypted_posts")
}

model Reaction {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userDid      String
  uri          String
  createdAt    DateTime  @default(now()) 
  updatedAt    DateTime?

  // Relationships
  post         EncryptedPost @relation(fields: [uri], references: [uri])

  @@index([userDid, createdAt], name: "idx_reactions_user_did_created")
  @@index([uri, createdAt], name: "idx_reactions_uri_created")
  @@unique([userDid, uri], name: "idx_reactions_user_did_uri_unique")
  @@map("reactions")
}

model Notification {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userDid      String
  authorDid    String
  reason       String
  reasonSubject String
  readAt       DateTime?
  createdAt    DateTime  @default(now()) 
  updatedAt    DateTime?

  // Relationships
  post         EncryptedPost? @relation(fields: [reasonSubject], references: [uri])

  @@index([userDid, createdAt], name: "idx_notifications_user_did_created_at_index")
  @@index([userDid, readAt], name: "idx_notifications_user_did_read_at_index")
  @@unique([authorDid, reasonSubject, reason], name: "idx_notifications_user_did_read_at_index")
  @@map("notifications")
}

model SeenNotifications {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userDid      String
  seenAt       DateTime

  @@index([userDid], name: "idx_seen_notifications_user_did")
  @@map("seen_notifications")
}

model Media {
  id          String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key         String
  userDid     String
  mimeType    String
  size        Int
  createdAt   DateTime @default(now())

  // Relationships
  mediaPosts  MediaPost[]

  @@map("media")
}

model MediaPost {
  mediaId           String @db.Uuid
  encryptedPostUri  String

  // Relationships
  media           Media @relation(fields: [mediaId], references: [id])
  encryptedPost   EncryptedPost @relation(fields: [encryptedPostUri], references: [uri])

  @@id([mediaId, encryptedPostUri])
  @@map("media_posts")
}

// Generates a broken ER diagram, see README.md if you
// need to update the diagram
// generator erd {
//  provider = "prisma-erd-generator"
// }

model UserDidCache {
  handle     String @id
  userDid    String

  @@map("user_did_cache")
}